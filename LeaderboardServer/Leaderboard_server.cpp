// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Leaderboard.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class LeaderboardHandler : virtual public LeaderboardIf {
public:
    LeaderboardHandler() {
        // Your initialization goes here
    }

    void setHighScore(const int32_t playerId, const int32_t highScore) {
        // Your implementation goes here
        printf("setHighScore\n");
    }

    void getTop20(std::map<int32_t, int32_t> & _return) {
        // Your implementation goes here
        printf("getTop20\n");
    }
};

int main(int argc, char **argv) {

    WSAData wsaData;
    int initializationResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (initializationResult != 0) {
        printf("Failed to init winsock % d\n", initializationResult);
        return 1;
    }

    int port = 9090;
    ::std::shared_ptr<LeaderboardHandler> handler(new LeaderboardHandler());
    ::std::shared_ptr<TProcessor> processor(new LeaderboardProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

