/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Leaderboard_H
#define Leaderboard_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "leaderboard_types.h"

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LeaderboardIf {
 public:
  virtual ~LeaderboardIf() {}
  virtual void setHighScore(const int32_t playerId, const int32_t highScore) = 0;
  virtual void getTop20(std::map<int32_t, int32_t> & _return) = 0;
};

class LeaderboardIfFactory {
 public:
  typedef LeaderboardIf Handler;

  virtual ~LeaderboardIfFactory() {}

  virtual LeaderboardIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LeaderboardIf* /* handler */) = 0;
  };

class LeaderboardIfSingletonFactory : virtual public LeaderboardIfFactory {
 public:
  LeaderboardIfSingletonFactory(const ::std::shared_ptr<LeaderboardIf>& iface) : iface_(iface) {}
  virtual ~LeaderboardIfSingletonFactory() {}

  virtual LeaderboardIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(LeaderboardIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<LeaderboardIf> iface_;
};

class LeaderboardNull : virtual public LeaderboardIf {
 public:
  virtual ~LeaderboardNull() {}
  void setHighScore(const int32_t /* playerId */, const int32_t /* highScore */) override {
    return;
  }
  void getTop20(std::map<int32_t, int32_t> & /* _return */) override {
    return;
  }
};

typedef struct _Leaderboard_setHighScore_args__isset {
  _Leaderboard_setHighScore_args__isset() : playerId(false), highScore(false) {}
  bool playerId :1;
  bool highScore :1;
} _Leaderboard_setHighScore_args__isset;

class Leaderboard_setHighScore_args {
 public:

  Leaderboard_setHighScore_args(const Leaderboard_setHighScore_args&) noexcept;
  Leaderboard_setHighScore_args& operator=(const Leaderboard_setHighScore_args&) noexcept;
  Leaderboard_setHighScore_args() noexcept
                                : playerId(0),
                                  highScore(0) {
  }

  virtual ~Leaderboard_setHighScore_args() noexcept;
  int32_t playerId;
  int32_t highScore;

  _Leaderboard_setHighScore_args__isset __isset;

  void __set_playerId(const int32_t val);

  void __set_highScore(const int32_t val);

  bool operator == (const Leaderboard_setHighScore_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(highScore == rhs.highScore))
      return false;
    return true;
  }
  bool operator != (const Leaderboard_setHighScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Leaderboard_setHighScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Leaderboard_setHighScore_pargs {
 public:


  virtual ~Leaderboard_setHighScore_pargs() noexcept;
  const int32_t* playerId;
  const int32_t* highScore;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Leaderboard_getTop20_args {
 public:

  Leaderboard_getTop20_args(const Leaderboard_getTop20_args&) noexcept;
  Leaderboard_getTop20_args& operator=(const Leaderboard_getTop20_args&) noexcept;
  Leaderboard_getTop20_args() noexcept {
  }

  virtual ~Leaderboard_getTop20_args() noexcept;

  bool operator == (const Leaderboard_getTop20_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Leaderboard_getTop20_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Leaderboard_getTop20_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Leaderboard_getTop20_pargs {
 public:


  virtual ~Leaderboard_getTop20_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Leaderboard_getTop20_result__isset {
  _Leaderboard_getTop20_result__isset() : success(false) {}
  bool success :1;
} _Leaderboard_getTop20_result__isset;

class Leaderboard_getTop20_result {
 public:

  Leaderboard_getTop20_result(const Leaderboard_getTop20_result&);
  Leaderboard_getTop20_result& operator=(const Leaderboard_getTop20_result&);
  Leaderboard_getTop20_result() noexcept {
  }

  virtual ~Leaderboard_getTop20_result() noexcept;
  std::map<int32_t, int32_t>  success;

  _Leaderboard_getTop20_result__isset __isset;

  void __set_success(const std::map<int32_t, int32_t> & val);

  bool operator == (const Leaderboard_getTop20_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Leaderboard_getTop20_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Leaderboard_getTop20_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Leaderboard_getTop20_presult__isset {
  _Leaderboard_getTop20_presult__isset() : success(false) {}
  bool success :1;
} _Leaderboard_getTop20_presult__isset;

class Leaderboard_getTop20_presult {
 public:


  virtual ~Leaderboard_getTop20_presult() noexcept;
  std::map<int32_t, int32_t> * success;

  _Leaderboard_getTop20_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LeaderboardClient : virtual public LeaderboardIf {
 public:
  LeaderboardClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LeaderboardClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setHighScore(const int32_t playerId, const int32_t highScore) override;
  void send_setHighScore(const int32_t playerId, const int32_t highScore);
  void getTop20(std::map<int32_t, int32_t> & _return) override;
  void send_getTop20();
  void recv_getTop20(std::map<int32_t, int32_t> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LeaderboardProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<LeaderboardIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (LeaderboardProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setHighScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTop20(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LeaderboardProcessor(::std::shared_ptr<LeaderboardIf> iface) :
    iface_(iface) {
    processMap_["setHighScore"] = &LeaderboardProcessor::process_setHighScore;
    processMap_["getTop20"] = &LeaderboardProcessor::process_getTop20;
  }

  virtual ~LeaderboardProcessor() {}
};

class LeaderboardProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LeaderboardProcessorFactory(const ::std::shared_ptr< LeaderboardIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< LeaderboardIfFactory > handlerFactory_;
};

class LeaderboardMultiface : virtual public LeaderboardIf {
 public:
  LeaderboardMultiface(std::vector<std::shared_ptr<LeaderboardIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LeaderboardMultiface() {}
 protected:
  std::vector<std::shared_ptr<LeaderboardIf> > ifaces_;
  LeaderboardMultiface() {}
  void add(::std::shared_ptr<LeaderboardIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setHighScore(const int32_t playerId, const int32_t highScore) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setHighScore(playerId, highScore);
    }
    ifaces_[i]->setHighScore(playerId, highScore);
  }

  void getTop20(std::map<int32_t, int32_t> & _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTop20(_return);
    }
    ifaces_[i]->getTop20(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LeaderboardConcurrentClient : virtual public LeaderboardIf {
 public:
  LeaderboardConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  LeaderboardConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setHighScore(const int32_t playerId, const int32_t highScore) override;
  void send_setHighScore(const int32_t playerId, const int32_t highScore);
  void getTop20(std::map<int32_t, int32_t> & _return) override;
  int32_t send_getTop20();
  void recv_getTop20(std::map<int32_t, int32_t> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
